[{"name": "app.py", "content": "import pandas as pd\nimport json\nimport urllib\nimport sys\n\nimport ipyleaflet as ipyl\nimport ipywidgets as widgets\n\nfrom shiny import *\nfrom shinywidgets import *\nfrom datetime import datetime\n\n# Route Data\n# https://mbta-massdot.opendata.arcgis.com/maps/MassDOT::mbta-systemwide-gtfs-map/about\n\ndef getMBTA(route):\n\n    # MBTA JSON file\n    # https://shinylive.io/py/examples/#fetch-data-from-a-web-api\n    url = \"https://mbta-flask-513a6449725e.herokuapp.com/proxy\"\n    if \"pyodide\" in sys.modules:\n        import pyodide.http\n        with pyodide.http.open_url(url) as f:\n            jdat = json.loads(f.getvalue())\n    else:\n        response = urllib.request.urlopen(url)\n        jdat = json.loads(response.read().decode(\"utf-8\"))\n\n    jdat_header = jdat[\"header\"]\n    jdat_entity = jdat[\"entity\"]\n\n    # MBTA DataFrame\n    jdf = pd.DataFrame({})\n    for i in range(len(jdat_entity)):\n        # Vehicle\n        car = jdat_entity[i]\n        # DataFrame\n        cdf = pd.DataFrame(\n            {\n                \"ID\": [car.get(\"id\")],\n                \"Lat\": [car.get(\"vehicle\").get(\"position\").get(\"latitude\")],\n                \"Lon\": [car.get(\"vehicle\").get(\"position\").get(\"longitude\")],\n                \"Route\": [car.get(\"vehicle\").get(\"trip\").get(\"route_id\")],\n                \"Direction\": [car.get(\"vehicle\").get(\"trip\").get(\"direction_id\")],\n                \"Carriage\": [\n                    (\n                        len(car.get(\"vehicle\").get(\"multi_carriage_details\"))\n                        if car.get(\"vehicle\").get(\"multi_carriage_details\") != None\n                        else \"-\"\n                    )\n                ],\n                \"Trip\": [car.get(\"vehicle\").get(\"trip\").get(\"trip_id\")],\n                \"Stop\": [car.get(\"vehicle\").get(\"stop_id\")],\n                \"Status\": [car.get(\"vehicle\").get(\"current_status\")],\n            }\n        )\n        # Combine\n        jdf = pd.concat([jdf, cdf], ignore_index=True)\n\n    # Route\n    rdf = jdf[jdf[\"Route\"] == route]\n\n    return rdf, jdat_header, jdat_entity\n\n# ------------------- #\n\n# Define UI\napp_ui = ui.page_fluid(\n    ui.panel_title(\"MBTA Real-Time Map\"),\n    ui.tags.h5(\"By Jianzhao Bi\"),\n    ui.input_select(id=\"route\", label=None, choices=[\n        'Green-B', 'Green-C', 'Green-D', 'Green-E', 'Red', 'Orange', 'Blue',\n        '1', '57', '60', '64', '66', '88', '90'\n    ], selected=\"Green-B\"),\n    ui.output_text(\"nowtime\"),\n    output_widget(\"routemap\"),\n)\n\ndef server(input, output, session):\n\n    # Register data and map\n    mbta_lst = reactive.value()\n    route_map = ipyl.Map(\n                basemap=ipyl.TileLayer(url='https://tile.thunderforest.com/transport/{z}/{x}/{y}.png?apikey=74002972fcb44035b775167d6c01a6f0'),\n                center=(42.3601, -71.0889),  # (lat, lon)\n                zoom=12,\n                close_popup_on_click=False,\n                scroll_wheel_zoom=True,\n                touch_zoom=True,\n                zoom_control=False,\n                zoom_snap=0.5, # Forces the map\u2019s zoom level to always be a multiple of this.\n                zoom_delta=1, # Controls how much the map\u2019s zoom level will change after pressing + or - on the keyboard, or using the zoom controls.\n                box_zoom=False, # Whether the map can be zoomed to a rectangular area specified by dragging the mouse while pressing the shift key\n            )\n    route_map.add(ipyl.ZoomControl(position=\"bottomright\"))\n    route_map.layout.height = \"550px\"\n    register_widget(\"routemap\", route_map)\n\n    # Update automatically\n    @reactive.Effect\n    def _():\n        mbta_lst.set(getMBTA(input.route()))\n        mbta_df, mbta_h, mbta_e = mbta_lst.get()\n        route_map.layers = [layer for layer in route_map.layers if isinstance(layer, ipyl.TileLayer)]  # clear layers\n        for i in range(len(mbta_df)):\n            marker = ipyl.CircleMarker(\n                location=(mbta_df[\"Lat\"].iloc[i], mbta_df[\"Lon\"].iloc[i]),\n                radius=10,\n                color=\"blue\" if mbta_df[\"Direction\"].iloc[i] == 1 else \"green\",\n                opacity=0.5,\n                draggable=False,\n            )\n            # marker.popup = ipyl.Popup(\n            #     location=(mbta_df[\"Lat\"].iloc[i], mbta_df[\"Lon\"].iloc[i]),\n            #     child=widgets.HTML(f\"ID: {mbta_df['ID'].iloc[i]}<br/>Cars: {mbta_df['Carriage'].iloc[i]}<br/>\"),\n            #     close_button=False\n            # )\n            route_map.add(marker)\n        reactive.invalidate_later(5)\n\n    @reactive.Effect\n    @reactive.event(input.route)\n    def _():\n        mbta_lst.set(getMBTA(input.route()))\n        mbta_df, mbta_h, mbta_e = mbta_lst.get()\n        latmean = mbta_df[\"Lat\"].mean()\n        lonmean = mbta_df[\"Lon\"].mean()\n        route_map.center = (latmean, lonmean)\n        route_map.zoom = 12\n\n    @output\n    @render.text\n    def nowtime():\n        mbta_df, mbta_h, mbta_e = mbta_lst.get()\n        return str(input.route()) + \" \" + str(datetime.fromtimestamp(mbta_h[\"timestamp\"]))\n\napp = App(app_ui, server)\n\n# run_app(app)", "type": "text"}, {"name": "tmp/test.py", "content": "import sys\nimport urllib.request\nimport json\n\nfrom shiny import *\n\ndef getData():\n    url = \"http://127.0.0.1:5000/proxy\"\n    if \"pyodide\" in sys.modules:\n        import pyodide.http\n        with pyodide.http.open_url(url) as f:\n            as_json = json.loads(f.getvalue())\n    else:\n        response = urllib.request.urlopen(url)\n        as_json = json.loads(response.read().decode(\"utf-8\"))\n    return as_json\n\napp_ui = ui.page_fluid(\n    ui.output_text(\"txt\")\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        as_json = getData()\n        return as_json\n\napp = App(app_ui, server)\n\n# run_app(app)\n\n\n", "type": "text"}, {"name": "tmp/test1.py", "content": "import urllib.request\n\nprint(\"------------------\")\n\nurl = \"https://api.openalex.org/works/W2741809807\"\n# url = \"http://echo.jsontest.com/insert-key-here/insert-value-here/key/value\"\nresponse = urllib.request.urlopen(url)\nprint(response.info())\n\nprint(\"------------------\")\n\n# url = \"https://cdn.mbta.com/realtime/VehiclePositions_enhanced.json\"\nurl = \"http://127.0.0.1:5000/proxy\"\nresponse = urllib.request.urlopen(url)\nprint(response.info())", "type": "text"}]