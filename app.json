[{"name": "app.py", "content": "import pandas as pd\nimport json\nimport urllib\nimport sys\n\nimport ipyleaflet as ipyl\n\nfrom shiny import *\nfrom shinywidgets import *\nfrom datetime import datetime\n\n\nasync def getMBTA(route):\n\n    # MBTA JSON file\n    # https://shinylive.io/py/examples/#fetch-data-from-a-web-api\n    if \"pyodide\" in sys.modules:\n        import pyodide.http\n        response = await pyodide.http.pyfetch(\"https://cdn.mbta.com/realtime/VehiclePositions_enhanced.json\")\n        if response.status != 200:\n            raise Exception(f\"Error fetching: {response.status}\")\n        jdat = await response.json()\n    else:\n        response = urllib.request.urlopen(\"https://cdn.mbta.com/realtime/VehiclePositions_enhanced.json\")\n        jdat = json.loads(response.read().decode(\"utf-8\"))\n\n    jdat_header = jdat[\"header\"]\n    jdat_entity = jdat[\"entity\"]\n\n    # MBTA DataFrame\n    jdf = pd.DataFrame({})\n    for i in range(len(jdat_entity)):\n        # Vehicle\n        car = jdat_entity[i]\n        # DataFrame\n        cdf = pd.DataFrame(\n            {\n                \"ID\": [car.get(\"id\")],\n                \"Lat\": [car.get(\"vehicle\").get(\"position\").get(\"latitude\")],\n                \"Lon\": [car.get(\"vehicle\").get(\"position\").get(\"longitude\")],\n                \"Route\": [car.get(\"vehicle\").get(\"trip\").get(\"route_id\")],\n                \"Direction\": [car.get(\"vehicle\").get(\"trip\").get(\"direction_id\")],\n                \"Carriage\": [\n                    (\n                        len(car.get(\"vehicle\").get(\"multi_carriage_details\"))\n                        if car.get(\"vehicle\").get(\"multi_carriage_details\") != None\n                        else \"-\"\n                    )\n                ],\n                \"Trip\": [car.get(\"vehicle\").get(\"trip\").get(\"trip_id\")],\n                \"Stop\": [car.get(\"vehicle\").get(\"stop_id\")],\n                \"Status\": [car.get(\"vehicle\").get(\"current_status\")],\n            }\n        )\n        # Combine\n        jdf = pd.concat([jdf, cdf], ignore_index=True)\n\n    # Route\n    rdf = jdf[jdf[\"Route\"] == route]\n\n    return rdf, jdat_header, jdat_entity\n\n# ------------------- #\n\napp_ui = ui.page_fluid(\n    ui.h3(\"MBTA Real-Time Map\"),\n    ui.h5(\"By Jianzhao Bi\"),\n    ui.input_select(\n        \"route\",\n        \"Route\",\n        {\"Green-B\": \"Green-B\", \"Green-E\": \"Green-E\"},\n        selected=\"Green-B\",\n    ),\n    ui.output_text(\"txt\"),\n    output_widget(\"map\"),\n)\n\n\ndef server(input, output, session):\n\n    @output\n    @render.text\n    async def txt():\n        mbta_df, mbta_h, mbta_e = await getMBTA(str(input.route()))\n        return datetime.fromtimestamp(mbta_h[\"timestamp\"])\n\n    @render_widget\n    async def map():\n        mbta_df, mbta_h, mbta_e = await getMBTA(str(input.route()))\n        ipylmap = ipyl.Map(\n            center=(42.3601, -71.0889), # (lat, lon)\n            zoom=12,\n            close_popup_on_click=False,\n            scroll_wheel_zoom=True,\n            touch_zoom=True,\n        )\n        for i in range(len(mbta_df)):\n            marker = ipyl.CircleMarker(\n                location=(mbta_df[\"Lat\"].iloc[i], mbta_df[\"Lon\"].iloc[i]),\n                radius=10,\n                color=\"green\",\n                opacity=0.5,\n                draggable=False,\n            )\n            ipylmap.add(marker)\n        return ipylmap\n\n\napp = App(app_ui, server, debug=False)", "type": "text"}]